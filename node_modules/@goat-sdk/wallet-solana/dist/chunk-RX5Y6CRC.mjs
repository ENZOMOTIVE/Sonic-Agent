import{a as h}from"./chunk-2PHMAGLI.mjs";import{a}from"./chunk-YSXGDEY5.mjs";import{TransactionMessage as g,VersionedTransaction as l}from"@solana/web3.js";import d from"tweetnacl";var o=class extends h{static{a(this,"SolanaKeypairWalletClient")}#t;constructor(e){let{keypair:t,connection:s}=e;super({connection:s}),this.#t=t}getAddress(){return this.#t.publicKey.toBase58()}async signMessage(e){let t=Buffer.from(e),s=d.sign.detached(t,this.#t.secretKey);return{signature:Buffer.from(s).toString("hex")}}async sendTransaction({instructions:e,addressLookupTableAddresses:t=[],accountsToSign:s=[]}){let n=await this.connection.getLatestBlockhash(),m=new g({payerKey:this.#t.publicKey,recentBlockhash:n.blockhash,instructions:e}).compileToV0Message(await this.getAddressLookupTableAccounts(t)),c=new l(m);c.sign([this.#t,...s]);let r=await this.connection.sendTransaction(c,{maxRetries:10,preflightCommitment:"confirmed"});return await this.connection.confirmTransaction({blockhash:n.blockhash,lastValidBlockHeight:n.lastValidBlockHeight,signature:r},"confirmed"),{hash:r}}async sendRawTransaction(e){let t=l.deserialize(Buffer.from(e,"base64")),s=await this.connection.getLatestBlockhash();t.message.recentBlockhash=s.blockhash,t.sign([this.#t]);let n=await this.connection.sendTransaction(t,{maxRetries:10,preflightCommitment:"confirmed"});return await this.connection.confirmTransaction({blockhash:s.blockhash,lastValidBlockHeight:s.lastValidBlockHeight,signature:n},"confirmed"),{hash:n}}},w=a(i=>new o(i),"solana");export{o as a,w as b};
