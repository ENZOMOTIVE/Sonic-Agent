"use strict";Object.defineProperty(exports, "__esModule", {value: true});var _chunkEI7MMDWYjs = require('./chunk-EI7MMDWY.js');var _core = require('@goat-sdk/core');var _web3js = require('@solana/web3.js');var _viem = require('viem');var l=class extends _core.WalletClientBase{static{_chunkEI7MMDWYjs.a.call(void 0, this,"SolanaWalletClient")}constructor(e){super(),this.connection=e.connection}getChain(){return{type:"solana"}}getConnection(){return this.connection}async balanceOf(e){let s=new (0, _web3js.PublicKey)(e),o=await this.connection.getBalance(s);return{decimals:9,symbol:"SOL",name:"Solana",value:_viem.formatUnits.call(void 0, BigInt(o),9),inBaseUnits:o.toString()}}async decompileVersionedTransactionToInstructions(e){let s=e.message.addressTableLookups.map(n=>n.accountKey),c={addressLookupTableAccounts:(await Promise.all(s.map(n=>this.connection.getAddressLookupTable(n).then(a=>a.value)))).filter(n=>n!=null)};return _web3js.TransactionMessage.decompile(e.message,c).instructions}async getAddressLookupTableAccounts(e){return(await this.connection.getMultipleAccountsInfo(e.map(o=>new (0, _web3js.PublicKey)(o)))).reduce((o,t,c)=>{let n=e[c];if(t){let a=new (0, _web3js.AddressLookupTableAccount)({key:new (0, _web3js.PublicKey)(n),state:_web3js.AddressLookupTableAccount.deserialize(t.data)});o.push(a)}return o},new Array)}};exports.a = l;
