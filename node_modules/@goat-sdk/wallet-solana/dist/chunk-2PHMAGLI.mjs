import{a as u}from"./chunk-YSXGDEY5.mjs";import{WalletClientBase as d}from"@goat-sdk/core";import{AddressLookupTableAccount as i,PublicKey as r,TransactionMessage as p}from"@solana/web3.js";import{formatUnits as A}from"viem";var l=class extends d{static{u(this,"SolanaWalletClient")}connection;constructor(e){super(),this.connection=e.connection}getChain(){return{type:"solana"}}getConnection(){return this.connection}async balanceOf(e){let s=new r(e),o=await this.connection.getBalance(s);return{decimals:9,symbol:"SOL",name:"Solana",value:A(BigInt(o),9),inBaseUnits:o.toString()}}async decompileVersionedTransactionToInstructions(e){let s=e.message.addressTableLookups.map(n=>n.accountKey),c={addressLookupTableAccounts:(await Promise.all(s.map(n=>this.connection.getAddressLookupTable(n).then(a=>a.value)))).filter(n=>n!=null)};return p.decompile(e.message,c).instructions}async getAddressLookupTableAccounts(e){return(await this.connection.getMultipleAccountsInfo(e.map(o=>new r(o)))).reduce((o,t,c)=>{let n=e[c];if(t){let a=new i({key:new r(n),state:i.deserialize(t.data)});o.push(a)}return o},new Array)}};export{l as a};
