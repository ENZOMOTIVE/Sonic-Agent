import * as _solana_web3_js from '@solana/web3.js';
import { Connection, VersionedTransaction, AddressLookupTableAccount } from '@solana/web3.js';
import { WalletClientBase } from '@goat-sdk/core';
import { SolanaTransaction } from './types/SolanaTransaction.mjs';

type SolanWalletClientCtorParams = {
    connection: Connection;
};
declare abstract class SolanaWalletClient extends WalletClientBase {
    protected connection: Connection;
    constructor(params: SolanWalletClientCtorParams);
    getChain(): {
        readonly type: "solana";
    };
    getConnection(): Connection;
    balanceOf(address: string): Promise<{
        decimals: number;
        symbol: string;
        name: string;
        value: string;
        inBaseUnits: string;
    }>;
    decompileVersionedTransactionToInstructions(versionedTransaction: VersionedTransaction): Promise<_solana_web3_js.TransactionInstruction[]>;
    abstract sendTransaction(transaction: SolanaTransaction): Promise<{
        hash: string;
    }>;
    abstract sendRawTransaction(transaction: string): Promise<{
        hash: string;
    }>;
    protected getAddressLookupTableAccounts(keys: string[]): Promise<AddressLookupTableAccount[]>;
}

export { type SolanWalletClientCtorParams, SolanaWalletClient };
