declare const VOTING_ESCROW_ABI: readonly [{
    readonly name: "AlreadyVoted";
    readonly type: "error";
    readonly inputs: readonly [];
}, {
    readonly name: "AmountTooSmall";
    readonly type: "error";
    readonly inputs: readonly [];
}, {
    readonly name: "CannotExit";
    readonly type: "error";
    readonly inputs: readonly [];
}, {
    readonly name: "DaoUnauthorized";
    readonly type: "error";
    readonly inputs: readonly [{
        readonly type: "address";
        readonly name: "dao";
    }, {
        readonly type: "address";
        readonly name: "where";
    }, {
        readonly type: "address";
        readonly name: "who";
    }, {
        readonly type: "bytes32";
        readonly name: "permissionId";
    }];
}, {
    readonly name: "LockNFTAlreadySet";
    readonly type: "error";
    readonly inputs: readonly [];
}, {
    readonly name: "MustBe18Decimals";
    readonly type: "error";
    readonly inputs: readonly [];
}, {
    readonly name: "NoLockFound";
    readonly type: "error";
    readonly inputs: readonly [];
}, {
    readonly name: "NonExistentToken";
    readonly type: "error";
    readonly inputs: readonly [];
}, {
    readonly name: "NotApprovedOrOwner";
    readonly type: "error";
    readonly inputs: readonly [];
}, {
    readonly name: "NotOwner";
    readonly type: "error";
    readonly inputs: readonly [];
}, {
    readonly name: "NotTicketHolder";
    readonly type: "error";
    readonly inputs: readonly [];
}, {
    readonly name: "NotVoter";
    readonly type: "error";
    readonly inputs: readonly [];
}, {
    readonly name: "NothingToSweep";
    readonly type: "error";
    readonly inputs: readonly [];
}, {
    readonly name: "OwnershipChange";
    readonly type: "error";
    readonly inputs: readonly [];
}, {
    readonly name: "SameAddress";
    readonly type: "error";
    readonly inputs: readonly [];
}, {
    readonly name: "TransferBalanceIncorrect";
    readonly type: "error";
    readonly inputs: readonly [];
}, {
    readonly name: "ZeroAddress";
    readonly type: "error";
    readonly inputs: readonly [];
}, {
    readonly name: "ZeroAmount";
    readonly type: "error";
    readonly inputs: readonly [];
}, {
    readonly name: "ZeroBalance";
    readonly type: "error";
    readonly inputs: readonly [];
}, {
    readonly name: "createLock";
    readonly type: "function";
    readonly stateMutability: "nonpayable";
    readonly inputs: readonly [{
        readonly type: "uint256";
        readonly name: "_value";
    }];
    readonly outputs: readonly [{
        readonly type: "uint256";
    }];
}, {
    readonly name: "createLockFor";
    readonly type: "function";
    readonly stateMutability: "nonpayable";
    readonly inputs: readonly [{
        readonly type: "uint256";
        readonly name: "_value";
    }, {
        readonly type: "address";
        readonly name: "_to";
    }];
    readonly outputs: readonly [{
        readonly type: "uint256";
    }];
}, {
    readonly name: "withdraw";
    readonly type: "function";
    readonly stateMutability: "nonpayable";
    readonly inputs: readonly [{
        readonly type: "uint256";
        readonly name: "_tokenId";
    }];
    readonly outputs: readonly [];
}, {
    readonly name: "beginWithdrawal";
    readonly type: "function";
    readonly stateMutability: "nonpayable";
    readonly inputs: readonly [{
        readonly type: "uint256";
        readonly name: "_tokenId";
    }];
    readonly outputs: readonly [];
}, {
    readonly name: "locked";
    readonly type: "function";
    readonly stateMutability: "view";
    readonly inputs: readonly [{
        readonly type: "uint256";
        readonly name: "_tokenId";
    }];
    readonly outputs: readonly [{
        readonly type: "tuple";
        readonly components: readonly [{
            readonly type: "uint208";
            readonly name: "amount";
        }, {
            readonly type: "uint48";
            readonly name: "start";
        }];
    }];
}, {
    readonly name: "votingPower";
    readonly type: "function";
    readonly stateMutability: "view";
    readonly inputs: readonly [{
        readonly type: "uint256";
        readonly name: "_tokenId";
    }];
    readonly outputs: readonly [{
        readonly type: "uint256";
    }];
}, {
    readonly name: "votingPowerForAccount";
    readonly type: "function";
    readonly stateMutability: "view";
    readonly inputs: readonly [{
        readonly type: "address";
        readonly name: "_account";
    }];
    readonly outputs: readonly [{
        readonly type: "uint256";
        readonly name: "accountVotingPower";
    }];
}, {
    readonly name: "totalVotingPower";
    readonly type: "function";
    readonly stateMutability: "view";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly type: "uint256";
    }];
}, {
    readonly name: "totalLocked";
    readonly type: "function";
    readonly stateMutability: "view";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly type: "uint256";
    }];
}, {
    readonly name: "minDeposit";
    readonly type: "function";
    readonly stateMutability: "view";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly type: "uint256";
    }];
}, {
    readonly name: "isVoting";
    readonly type: "function";
    readonly stateMutability: "view";
    readonly inputs: readonly [{
        readonly type: "uint256";
        readonly name: "_tokenId";
    }];
    readonly outputs: readonly [{
        readonly type: "bool";
    }];
}, {
    readonly name: "ownedTokens";
    readonly type: "function";
    readonly stateMutability: "view";
    readonly inputs: readonly [{
        readonly type: "address";
        readonly name: "_owner";
    }];
    readonly outputs: readonly [{
        readonly type: "uint256[]";
        readonly name: "tokenIds";
    }];
}, {
    readonly name: "setMinDeposit";
    readonly type: "function";
    readonly stateMutability: "nonpayable";
    readonly inputs: readonly [{
        readonly type: "uint256";
        readonly name: "_minDeposit";
    }];
    readonly outputs: readonly [];
}, {
    readonly name: "pause";
    readonly type: "function";
    readonly stateMutability: "nonpayable";
    readonly inputs: readonly [];
    readonly outputs: readonly [];
}, {
    readonly name: "unpause";
    readonly type: "function";
    readonly stateMutability: "nonpayable";
    readonly inputs: readonly [];
    readonly outputs: readonly [];
}, {
    readonly name: "paused";
    readonly type: "function";
    readonly stateMutability: "view";
    readonly inputs: readonly [];
    readonly outputs: readonly [{
        readonly type: "bool";
    }];
}];
declare const MODE_TOKEN_ABI: readonly [{
    readonly name: "balanceOf";
    readonly type: "function";
    readonly stateMutability: "view";
    readonly inputs: readonly [{
        readonly type: "address";
        readonly name: "account";
    }];
    readonly outputs: readonly [{
        readonly type: "uint256";
    }];
}, {
    readonly name: "approve";
    readonly type: "function";
    readonly stateMutability: "nonpayable";
    readonly inputs: readonly [{
        readonly type: "address";
        readonly name: "spender";
    }, {
        readonly type: "uint256";
        readonly name: "amount";
    }];
    readonly outputs: readonly [{
        readonly type: "bool";
    }];
}];
declare const BPT_TOKEN_ABI: readonly [{
    readonly name: "balanceOf";
    readonly type: "function";
    readonly stateMutability: "view";
    readonly inputs: readonly [{
        readonly type: "address";
        readonly name: "account";
    }];
    readonly outputs: readonly [{
        readonly type: "uint256";
    }];
}, {
    readonly name: "approve";
    readonly type: "function";
    readonly stateMutability: "nonpayable";
    readonly inputs: readonly [{
        readonly type: "address";
        readonly name: "spender";
    }, {
        readonly type: "uint256";
        readonly name: "amount";
    }];
    readonly outputs: readonly [{
        readonly type: "bool";
    }];
}];

export { BPT_TOKEN_ABI, MODE_TOKEN_ABI, VOTING_ESCROW_ABI };
