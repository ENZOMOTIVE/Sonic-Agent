import{a as t}from"./chunk-YSXGDEY5.mjs";import{createToolParameters as o}from"@goat-sdk/core";import{z as e}from"zod";var s=class extends o(e.object({network:e.string().describe("The network id to get data for (e.g., 'eth', 'polygon_pos')"),addresses:e.array(e.string()).describe("The addresses of the pools to get data for")})){static{t(this,"GetPoolDataByPoolAddressParameters")}},d=class extends o(e.object({network:e.string().describe("The network id to get data for (e.g., 'eth', 'polygon_pos')")})){static{t(this,"GetTrendingPoolsByNetworkParameters")}},n=class extends o(e.object({include:e.array(e.enum(["base_token","quote_token","dex","network"])).describe("The fields to include in the response"),page:e.number().max(10).describe("The page number to get trending pools for"),duration:e.enum(["24h","6h","1h","5m"]).describe("The duration to get trending pools for")})){static{t(this,"GetTrendingPoolsParameters")}},i=class extends o(e.object({vsCurrency:e.string().default("usd").describe("The target currency of market data (usd, eur, jpy, etc.)"),duration:e.enum(["1h","24h","7d","14d","30d","60d","1y"]).optional().default("24h").describe("The duration to get top gainers/losers for"),topCoins:e.enum(["300","500","1000","all"]).optional().default("1000").describe("The number of top coins to get")})){static{t(this,"TopGainersLosersParameters")}},a=class extends o(e.object({network:e.string().describe("The network id to get data for (e.g., 'eth', 'polygon_pos')"),address:e.string().describe("The address of the token to get data for")})){static{t(this,"GetTokenDataByTokenAddressParameters")}},c=class extends o(e.object({network:e.string().describe("The network id to get data for (e.g., 'eth', 'polygon_pos')"),poolAddress:e.string().describe("The address of the pool to get data for")})){static{t(this,"GetTokensInfoByPoolAddressParameters")}};export{s as a,d as b,n as c,i as d,a as e,c as f};
