import{a as t}from"./chunk-YSXGDEY5.mjs";import{createToolParameters as a}from"@goat-sdk/core";import{z as e}from"zod";var d=class extends a(e.object({})){static{t(this,"NoParams")}},n=class extends a(e.object({coinIds:e.array(e.string()).describe("The ID of the coin on CoinGecko (e.g., 'bitcoin', 'eth')"),vsCurrency:e.string().default("usd").describe("The target currency to get price in (e.g., 'usd', 'eur', 'jpy')"),includeMarketCap:e.boolean().optional().default(!1).describe("Include market cap data in the response"),include24hrVol:e.boolean().optional().default(!1).describe("Include 24 hour volume data in the response"),include24hrChange:e.boolean().optional().default(!1).describe("Include 24 hour price change data in the response"),includeLastUpdatedAt:e.boolean().optional().default(!1).describe("Include last updated timestamp in the response")})){static{t(this,"GetCoinPricesParameters")}},r=class extends a(e.object({query:e.string().describe("The search query to find coins (e.g., 'bitcoin' or 'btc')")})){static{t(this,"SearchCoinsParameters")}},s=class extends a(e.object({id:e.string().describe("Asset platform's id (e.g., 'eth')"),contractAddresses:e.array(e.string()).describe("List of contract addresses for the tokens"),vsCurrency:e.string().default("usd").describe("Target currency (e.g., 'usd', 'eur')"),includeMarketCap:e.boolean().optional().default(!1).describe("Include market cap data"),include24hrVol:e.boolean().optional().default(!1).describe("Include 24hr volume"),include24hrChange:e.boolean().optional().default(!1).describe("Include 24hr change"),includeLastUpdatedAt:e.boolean().optional().default(!1).describe("Include last updated timestamp")})){static{t(this,"GetCoinPriceByContractAddressParameters")}},c=class extends a(e.object({id:e.string().describe("Pass the coin id (can be obtained from the supported coins endpoint)"),localization:e.boolean().optional().default(!1).describe("Include all localizations"),tickers:e.boolean().optional().default(!0).describe("Include tickers data"),marketData:e.boolean().optional().default(!0).describe("Include market data"),communityData:e.boolean().optional().default(!0).describe("Include community data"),developerData:e.boolean().optional().default(!0).describe("Include developer data"),sparkline:e.boolean().optional().default(!1).describe("Include sparkline 7 days data")})){static{t(this,"GetCoinDataParameters")}},i=class extends a(e.object({id:e.string().describe("Pass the coin id (can be obtained from the supported coins endpoint)"),date:e.string().describe("The date of data snapshot in dd-mm-yyyy format"),localization:e.boolean().optional().default(!0).describe("Include localized languages")})){static{t(this,"GetHistoricalDataParameters")}},l=class extends a(e.object({id:e.string().describe("Pass the coin id (can be obtained from the supported coins endpoint)"),vsCurrency:e.string().default("usd").describe("The target currency of market data (usd, eur, jpy, etc.)"),days:e.number().describe("Data up to number of days ago (1/7/14/30/90/180/365/max)")})){static{t(this,"GetOHLCParameters")}},u=class extends a(e.object({vsCurrency:e.string().default("usd").describe("The target currency of market data (usd, eur, jpy, etc.)"),ids:e.array(e.string()).describe("The ids of the coins to get trending data for"),category:e.string().describe("The category to get trending data for"),order:e.enum(["market_cap_desc","volume_desc","volume_asc","market_cap_asc"]).describe("The order to get trending data for"),perPage:e.number().min(1).max(30).default(10).describe("The number of trending coins to get"),page:e.number().describe("The page number to get trending coins for"),sparkline:e.boolean().optional().default(!1).describe("Include sparkline 7 days data"),priceChangePercentage:e.enum(["1h","24h","7d","14d","30d","200d","1y"]).optional().default("24h").describe("The price change percentage to get trending coins for"),locale:e.string().optional().default("en").describe("The locale to get trending coins for")})){static{t(this,"GetTrendingCoinCategoriesParameters")}};export{d as a,n as b,r as c,s as d,c as e,i as f,l as g,u as h};
