import * as _goat_sdk_core from '@goat-sdk/core';
import { z } from 'zod';

declare const GetNftCollectionStatisticsParametersSchema_base: _goat_sdk_core.ToolParametersStatic<z.ZodObject<{
    collectionSlug: z.ZodString;
}, "strip", z.ZodTypeAny, {
    collectionSlug: string;
}, {
    collectionSlug: string;
}>>;
declare class GetNftCollectionStatisticsParametersSchema extends GetNftCollectionStatisticsParametersSchema_base {
}
declare const GetNftSalesParametersSchema_base: _goat_sdk_core.ToolParametersStatic<z.ZodObject<{
    collectionSlug: z.ZodString;
}, "strip", z.ZodTypeAny, {
    collectionSlug: string;
}, {
    collectionSlug: string;
}>>;
declare class GetNftSalesParametersSchema extends GetNftSalesParametersSchema_base {
}
declare const GetNftCollectionStatisticsResponseSchema: z.ZodObject<{
    total: z.ZodObject<{
        volume: z.ZodNumber;
        sales: z.ZodNumber;
        average_price: z.ZodNumber;
        num_owners: z.ZodNumber;
        market_cap: z.ZodNumber;
        floor_price: z.ZodNumber;
        floor_price_symbol: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        volume: number;
        sales: number;
        average_price: number;
        num_owners: number;
        market_cap: number;
        floor_price: number;
        floor_price_symbol: string;
    }, {
        volume: number;
        sales: number;
        average_price: number;
        num_owners: number;
        market_cap: number;
        floor_price: number;
        floor_price_symbol: string;
    }>;
    intervals: z.ZodArray<z.ZodObject<{
        interval: z.ZodString;
        volume: z.ZodNumber;
        volume_diff: z.ZodNumber;
        volume_change: z.ZodNumber;
        sales: z.ZodNumber;
        sales_diff: z.ZodNumber;
        average_price: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        volume: number;
        sales: number;
        average_price: number;
        interval: string;
        volume_diff: number;
        volume_change: number;
        sales_diff: number;
    }, {
        volume: number;
        sales: number;
        average_price: number;
        interval: string;
        volume_diff: number;
        volume_change: number;
        sales_diff: number;
    }>, "many">;
}, "strip", z.ZodTypeAny, {
    total: {
        volume: number;
        sales: number;
        average_price: number;
        num_owners: number;
        market_cap: number;
        floor_price: number;
        floor_price_symbol: string;
    };
    intervals: {
        volume: number;
        sales: number;
        average_price: number;
        interval: string;
        volume_diff: number;
        volume_change: number;
        sales_diff: number;
    }[];
}, {
    total: {
        volume: number;
        sales: number;
        average_price: number;
        num_owners: number;
        market_cap: number;
        floor_price: number;
        floor_price_symbol: string;
    };
    intervals: {
        volume: number;
        sales: number;
        average_price: number;
        interval: string;
        volume_diff: number;
        volume_change: number;
        sales_diff: number;
    }[];
}>;
declare const GetNftSalesResponseSchema: z.ZodObject<{
    asset_events: z.ZodArray<z.ZodObject<{
        event_type: z.ZodString;
        order_hash: z.ZodString;
        chain: z.ZodString;
        protocol_address: z.ZodString;
        closing_date: z.ZodNumber;
        nft: z.ZodObject<{
            identifier: z.ZodString;
            collection: z.ZodString;
            contract: z.ZodString;
            token_standard: z.ZodString;
            name: z.ZodString;
            description: z.ZodString;
            image_url: z.ZodString;
            display_image_url: z.ZodString;
            display_animation_url: z.ZodNullable<z.ZodString>;
            metadata_url: z.ZodString;
            opensea_url: z.ZodString;
            updated_at: z.ZodString;
            is_disabled: z.ZodBoolean;
            is_nsfw: z.ZodBoolean;
        }, "strip", z.ZodTypeAny, {
            identifier: string;
            collection: string;
            contract: string;
            token_standard: string;
            name: string;
            description: string;
            image_url: string;
            display_image_url: string;
            display_animation_url: string | null;
            metadata_url: string;
            opensea_url: string;
            updated_at: string;
            is_disabled: boolean;
            is_nsfw: boolean;
        }, {
            identifier: string;
            collection: string;
            contract: string;
            token_standard: string;
            name: string;
            description: string;
            image_url: string;
            display_image_url: string;
            display_animation_url: string | null;
            metadata_url: string;
            opensea_url: string;
            updated_at: string;
            is_disabled: boolean;
            is_nsfw: boolean;
        }>;
        quantity: z.ZodNumber;
        seller: z.ZodString;
        buyer: z.ZodString;
        payment: z.ZodObject<{
            quantity: z.ZodString;
            token_address: z.ZodString;
            decimals: z.ZodNumber;
            symbol: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            symbol: string;
            quantity: string;
            token_address: string;
            decimals: number;
        }, {
            symbol: string;
            quantity: string;
            token_address: string;
            decimals: number;
        }>;
        transaction: z.ZodString;
        event_timestamp: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        event_type: string;
        order_hash: string;
        chain: string;
        protocol_address: string;
        closing_date: number;
        nft: {
            identifier: string;
            collection: string;
            contract: string;
            token_standard: string;
            name: string;
            description: string;
            image_url: string;
            display_image_url: string;
            display_animation_url: string | null;
            metadata_url: string;
            opensea_url: string;
            updated_at: string;
            is_disabled: boolean;
            is_nsfw: boolean;
        };
        quantity: number;
        seller: string;
        buyer: string;
        payment: {
            symbol: string;
            quantity: string;
            token_address: string;
            decimals: number;
        };
        transaction: string;
        event_timestamp: number;
    }, {
        event_type: string;
        order_hash: string;
        chain: string;
        protocol_address: string;
        closing_date: number;
        nft: {
            identifier: string;
            collection: string;
            contract: string;
            token_standard: string;
            name: string;
            description: string;
            image_url: string;
            display_image_url: string;
            display_animation_url: string | null;
            metadata_url: string;
            opensea_url: string;
            updated_at: string;
            is_disabled: boolean;
            is_nsfw: boolean;
        };
        quantity: number;
        seller: string;
        buyer: string;
        payment: {
            symbol: string;
            quantity: string;
            token_address: string;
            decimals: number;
        };
        transaction: string;
        event_timestamp: number;
    }>, "many">;
    next: z.ZodString;
}, "strip", z.ZodTypeAny, {
    asset_events: {
        event_type: string;
        order_hash: string;
        chain: string;
        protocol_address: string;
        closing_date: number;
        nft: {
            identifier: string;
            collection: string;
            contract: string;
            token_standard: string;
            name: string;
            description: string;
            image_url: string;
            display_image_url: string;
            display_animation_url: string | null;
            metadata_url: string;
            opensea_url: string;
            updated_at: string;
            is_disabled: boolean;
            is_nsfw: boolean;
        };
        quantity: number;
        seller: string;
        buyer: string;
        payment: {
            symbol: string;
            quantity: string;
            token_address: string;
            decimals: number;
        };
        transaction: string;
        event_timestamp: number;
    }[];
    next: string;
}, {
    asset_events: {
        event_type: string;
        order_hash: string;
        chain: string;
        protocol_address: string;
        closing_date: number;
        nft: {
            identifier: string;
            collection: string;
            contract: string;
            token_standard: string;
            name: string;
            description: string;
            image_url: string;
            display_image_url: string;
            display_animation_url: string | null;
            metadata_url: string;
            opensea_url: string;
            updated_at: string;
            is_disabled: boolean;
            is_nsfw: boolean;
        };
        quantity: number;
        seller: string;
        buyer: string;
        payment: {
            symbol: string;
            quantity: string;
            token_address: string;
            decimals: number;
        };
        transaction: string;
        event_timestamp: number;
    }[];
    next: string;
}>;

export { GetNftCollectionStatisticsParametersSchema, GetNftCollectionStatisticsResponseSchema, GetNftSalesParametersSchema, GetNftSalesResponseSchema };
